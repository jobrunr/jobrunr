plugins {
    id 'java-platform'
    id 'maven-publish'
    id 'signing'
}

version = System.getenv('DRONE_TAG') ?: "v1.0.0-SNAPSHOT"

dependencies {
    constraints {
        api 'org.slf4j:slf4j-api:2.0.16'
        api 'org.ow2.asm:asm:9.7.1'
        api 'org.ow2.asm:asm-util:9.7.1'

        api 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
        api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.2'
        api 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.18.2'
        api 'com.fasterxml.jackson.module:jackson-module-kotlin:2.18.2'
        api 'com.google.code.gson:gson:2.11.0'
        api 'org.eclipse:yasson:3.0.4'
        api 'io.micrometer:micrometer-core:1.14.3'
        api 'io.insert-koin:koin-core:4.0.1'

        api 'org.xerial:sqlite-jdbc:3.47.1.0'
        api 'com.h2database:h2:2.3.232'
        api 'org.postgresql:postgresql:42.7.4'
        api 'com.google.cloud.sql:postgres-socket-factory:1.21.2'
        api 'com.oracle.database.jdbc:ojdbc8:23.6.0.24.10'
        api 'org.mariadb.jdbc:mariadb-java-client:3.5.1'
        api 'mysql:mysql-connector-java:8.0.33'
        api 'com.microsoft.sqlserver:mssql-jdbc:12.8.1.jre8'
        api 'com.ibm.db2:jcc:12.1.0.0'
        api 'com.zaxxer:HikariCP:6.2.1'
        api 'io.agroal:agroal-pool:2.5'
        api 'org.apache.commons:commons-dbcp2:2.13.0'
        api 'org.apache.tomcat:tomcat-jdbc:11.0.1'
        api 'redis.clients:jedis:5.2.0'
        api 'io.lettuce:lettuce-core:6.5.2.RELEASE'
        api 'org.mongodb:mongodb-driver-sync:5.3.0'
        api 'co.elastic.clients:elasticsearch-java:8.17.0'

        api 'org.junit.jupiter:junit-jupiter:5.11.4'
        api 'io.github.artsok:rerunner-jupiter:2.1.6'
        api 'org.awaitility:awaitility:4.2.2'
        api 'org.assertj:assertj-core:3.27.2'
        api 'com.tngtech.archunit:archunit-junit5:1.3.0'
        api 'net.javacrumbs.json-unit:json-unit-assertj:2.40.1'
        api 'org.mockito:mockito-inline:5.2.0'
        api 'org.mockito:mockito-junit-jupiter:5.15.2'
        api 'ch.qos.logback:logback-classic:1.5.16'
        api 'org.testcontainers:testcontainers:1.20.4'
        api 'org.testcontainers:junit-jupiter:1.20.4'
        api 'org.testcontainers:jdbc:1.20.4'
        api 'org.testcontainers:mariadb:1.20.4'
        api 'org.testcontainers:mssqlserver:1.20.4'
        api 'org.testcontainers:mysql:1.20.4'
        api 'org.testcontainers:oracle-xe:1.20.4'
        api 'org.testcontainers:postgresql:1.20.4'
        api 'org.testcontainers:db2:1.20.4'
        api 'org.testcontainers:elasticsearch:1.20.4'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.jobrunr'
            artifactId = 'jobrunr-bom'
            version = project.version
            from components.javaPlatform

            pom {
                name = 'JobRunr BOM'
                description = 'An easy way to perform background processing on the JVM. Backed by persistent storage. Open and free for commercial use.'
                url = 'https://github.com/jobrunr/jobrunr'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0 or later'
                        url = 'https://github.com/jobrunr/jobrunr/blob/master/License.md#lgpl-v3-license'
                    }
                    license {
                        name = 'Commercial License'
                        url = 'https://github.com/jobrunr/jobrunr/blob/master/License.md#commercial-license'
                    }
                }
                developers {
                    developer {
                        id = 'rdehuyss'
                        name = 'Ronald Dehuysser'
                        email = 'ronald.dehuysser@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/jobrunr/jobrunr.git'
                    developerConnection = 'scm:git@github.com:jobrunr/jobrunr.git'
                    url = 'https://github.com/jobrunr/jobrunr.git'
                }
            }
        }
    }
}

signing {
    String base64Key = System.getenv('SIGNING_KEY')
    if (base64Key) {
        useInMemoryPgpKeys(new String(Base64.decoder.decode(base64Key)), System.getenv('SIGNING_PASSWORD'))
        sign publishing.publications.mavenJava
    }
}
