plugins {
    id 'java-platform'
    id 'maven-publish'
    id 'signing'
}

version = System.getenv('DRONE_TAG') ?: "v1.0.0-SNAPSHOT"

dependencies {
    constraints {
        api 'org.slf4j:slf4j-api:1.7.36'
        api 'org.ow2.asm:asm:9.3'
        api 'org.ow2.asm:asm-util:9.3'

        api 'org.slf4j:slf4j-simple:1.7.36'
        api 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
        api 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.4'
        api 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.4'
        api 'com.google.code.gson:gson:2.9.1'
        api 'org.eclipse:yasson:1.0.11' //todo upgrade after MicroProfile and Quarkus upgraded
        api 'io.micrometer:micrometer-core:1.9.4'
        api 'io.insert-koin:koin-core:2.2.2'

        api 'org.xerial:sqlite-jdbc:3.39.3.0'
        api 'com.h2database:h2:2.1.214'
        api 'org.postgresql:postgresql:42.5.0'
        api 'com.google.cloud.sql:postgres-socket-factory:1.1.0'
        api 'com.oracle.database.jdbc:ojdbc8:21.7.0.0'
        api 'org.mariadb.jdbc:mariadb-java-client:3.0.8'
        api 'mysql:mysql-connector-java:8.0.30'
        api 'com.microsoft.sqlserver:mssql-jdbc:11.2.1.jre8'
        api 'com.ibm.db2:jcc:11.5.7.0'
        api 'com.zaxxer:HikariCP:5.0.1'
        api 'org.apache.commons:commons-dbcp2:2.9.0'
        api 'com.mchange:c3p0:0.9.5.5'
        api 'org.apache.tomcat:tomcat-jdbc:10.1.0'
        api 'redis.clients:jedis:4.2.3'
        api 'io.lettuce:lettuce-core:6.2.0.RELEASE'
        api 'org.mongodb:mongodb-driver-sync:4.7.1'
        api 'co.elastic.clients:elasticsearch-java:7.17.8'

        api 'org.junit.jupiter:junit-jupiter:5.9.1'
        api 'io.github.artsok:rerunner-jupiter:2.1.6'
        api 'org.awaitility:awaitility:4.2.0'
        api 'org.assertj:assertj-core:3.23.1'
        api 'com.tngtech.archunit:archunit-junit5:0.23.1'
        api 'net.javacrumbs.json-unit:json-unit-assertj:2.35.0'
        api 'org.mockito:mockito-inline:4.8.0'
        api 'org.mockito:mockito-junit-jupiter:4.8.0'
        api 'ch.qos.logback:logback-classic:1.2.11'
        api 'org.testcontainers:testcontainers:1.17.3'
        api 'org.testcontainers:junit-jupiter:1.17.3'
        api 'org.testcontainers:jdbc:1.17.3'
        api 'org.testcontainers:mariadb:1.17.3'
        api 'org.testcontainers:mssqlserver:1.17.3'
        api 'org.testcontainers:mysql:1.17.3'
        api 'org.testcontainers:oracle-xe:1.17.3'
        api 'org.testcontainers:postgresql:1.17.3'
        api 'org.testcontainers:db2:1.17.3'
        api 'org.testcontainers:elasticsearch:1.17.3'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.jobrunr'
            artifactId = 'jobrunr-bom'
            version = project.version
            from components.javaPlatform

            pom {
                name = 'JobRunr BOM'
                description = 'An easy way to perform background processing on the JVM. Backed by persistent storage. Open and free for commercial use.'
                url = 'https://github.com/jobrunr/jobrunr'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0 or later'
                        url = 'https://github.com/jobrunr/jobrunr/blob/master/License.md#lgpl-v3-license'
                    }
                    license {
                        name = 'Commercial License'
                        url = 'https://github.com/jobrunr/jobrunr/blob/master/License.md#commercial-license'
                    }
                }
                developers {
                    developer {
                        id = 'rdehuyss'
                        name = 'Ronald Dehuysser'
                        email = 'ronald.dehuysser@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/jobrunr/jobrunr.git'
                    developerConnection = 'scm:git@github.com:jobrunr/jobrunr.git'
                    url = 'https://github.com/jobrunr/jobrunr.git'
                }
            }
        }
    }
}

signing {
    String base64Key = System.getenv('SIGNING_KEY')
    if (base64Key) {
        useInMemoryPgpKeys(new String(Base64.decoder.decode(base64Key)), System.getenv('SIGNING_PASSWORD'))
        sign publishing.publications.mavenJava
    }
}
