plugins {
    id 'com.github.ben-manes.versions' version '0.48.0'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'signing'
}

nexusPublishing {
    packageGroup = "org.jobrunr"
    repositories {
        sonatype()
    }
}

subprojects {
    group = 'org.jobrunr'
    version = System.getenv('DRONE_TAG')?.replace("v", "") ?: "v1.0.0-SNAPSHOT".replace("v", "")
}

def isNonStable = { String version ->
    def isPreview = ['SNAPSHOT', 'ALPHA'].any { it -> version.toUpperCase().contains(it) }
    def isRelease = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /(?!\.)(\d+(\.\d+)+)(?![\d\.])?(\.jre\d)?/
    def isVersionMatch = (version ==~ regex)
    def result = isPreview || !(isRelease || isVersionMatch)
    return result
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

configure(subprojects.findAll { !['platform'].contains(it.name) }) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        options.encoding = "UTF-8"
        options.release = 8
    }

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        compileTestJava.options.encoding = 'UTF-8'
    }

    javadoc {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        implementation platform(project(':platform'))

        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'io.github.artsok:rerunner-jupiter'
        testImplementation 'org.awaitility:awaitility'
        testImplementation 'org.assertj:assertj-core'
        testImplementation 'com.tngtech.archunit:archunit-junit5'
        testImplementation 'net.javacrumbs.json-unit:json-unit-assertj'
        testImplementation 'ch.qos.logback:logback-classic'
        testImplementation 'org.mockito:mockito-inline'
        testImplementation 'org.mockito:mockito-junit-jupiter'
    }

    tasks.clean.doFirst {
        delete "/tmp/reports/$project.name"
        println "Deleted /tmp/reports/$project.name"
    }

    test {
        finalizedBy jacocoTestReport
        reports.junitXml.destination = file("/tmp/reports/$project.name")
        reports.html.destination = file("/tmp/reports/$project.name")

        useJUnitPlatform()
        testLogging {
            minGranularity = 3
            events "passed", "skipped", "failed"
        }
    }

    jacoco {
        toolVersion = "0.8.7"
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml {
                enabled true
            }
        }
    }

    sonar {
        properties {
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.projectKey", "jobrunr_jobrunr"
            property "sonar.organization", "jobrunr"
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}