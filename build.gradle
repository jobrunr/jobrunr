import groovy.json.JsonSlurper

plugins {
    id 'org.sonarqube' version '6.3.1.5724'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'signing'
    id("net.ltgt.errorprone") version '4.3.0' apply false
}

nexusPublishing {
    packageGroup = "org.jobrunr"
    repositories {
        // see https://central.sonatype.org/publish/publish-portal-ossrh-staging-api/#configuration
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
        }
    }
}

task nexusPushFromStagingToCentral {
    doLast {
        if (System.getenv("SONATYPE_AUTH_HEADER") == null) {
            throw new GradleException("Cannot push Sonatype Nexus artifacts to Portal API: env var SONATYPE_AUTH_HEADER is not set")
        }

        println("Retrieving uploaded OSSRH Staging API repository key...")
        def get = new URL("https://ossrh-staging-api.central.sonatype.com/manual/search/repositories?profile_id=org.jobrunr&state=open&ip=any").openConnection();
        get.setRequestProperty("Authorization", System.getenv("SONATYPE_AUTH_HEADER"))
        def resp = get.getInputStream().getText();
        def json = new JsonSlurper().parseText(resp)

        if (!get.getResponseCode().equals(200)) {
            throw new GradleException("Cannot find repository key from Sonatype OSSRH Staging API: received code " + get.getResponseCode())
        }
        if (json.repositories == null || json.repositories[0] == null) {
            throw new GradleException("Cannot find repository key from Sonatype OSSRH Staging API: no key returned, is the publication done? received json " + json)
        }
        def repoKey = json.repositories[0].key
        println("-- Found Repo Key " + repoKey)

        println("Uploading from OSSRH Staging API to Central Portal using retrieved key...")
        def post = new URL("https://ossrh-staging-api.central.sonatype.com/manual/upload/repository/" + repoKey).openConnection();
        post.setRequestProperty("Authorization", System.getenv("SONATYPE_AUTH_HEADER"))
        post.setRequestMethod("POST")
        post.setDoOutput(true)

        if (!post.getResponseCode().equals(200)) {
            throw new GradleException("Cannot push artifacts from staging API to Portal API: received code " + post.getResponseCode() + " - please log into https://central.sonatype.com/ to investigate what went wrong.")
        }
        println("-- Successfully pushed Sonatype Nexus artifacts to Portal API: please log into https://central.sonatype.com/ to finish the release.")
    }
}

subprojects {
    group = 'org.jobrunr'
    version = System.getenv('CI_COMMIT_TAG')?.replace("v", "") ?: "v1.0.0-SNAPSHOT".replace("v", "")
}

def isNonStable = { String version ->
    def isPreview = ['SNAPSHOT', 'ALPHA'].any { it -> version.toUpperCase().contains(it) }
    def isRelease = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /(?!\.)(\d+(\.\d+)+)(?![\d\.])?(\.jre\d)?/
    def isVersionMatch = (version ==~ regex)
    def result = isPreview || !(isRelease || isVersionMatch)
    return result
}

sonar {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "jobrunr_jobrunr"
        property "sonar.organization", "jobrunr"
        // property "sonar.branch.name", "v8"
        property "sonar.coverage.jacoco.xmlReportPaths", "/tmp/reports/$project.name/jacocoTestCoverage.xml"
    }
}

configure(subprojects.findAll { !['platform'].contains(it.name) }) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'net.ltgt.errorprone'

    compileJava {
        options.release = 21
        options.encoding = "UTF-8"
    }

    tasks.withType(JavaCompile).configureEach {
        options.errorprone.enabled = false
        options.errorprone.disableWarningsInGeneratedCode = true
        options.errorprone {
            // built-in error-prone rules
            disable("ReturnValueIgnored")                       // for BatchCollector we rely on side effects to finish it
            disable("CanonicalDuration")                        // we'd rather have ofHours() on every line next to each other
            disable("DoNotCallSuggester")                       // this is a Google-specific annotation
            disable("AnnotateFormatMethod")                     // this is a Google-specific annotation
            disable("JdkObsolete")                              // we still rely on JDK8 things
            disable("JavaDurationGetSecondsToToSeconds")        // we can't update to JDK9 just yet
            disable("PatternMatchingInstanceof")                // we can't update to JDK9 just yet
            disable("StringCaseLocaleUsage")                    // we are never going to run into this issue
            disable("StringSplitter")                           // should not happen because of validation
        }
    }

    compileTestJava {
        options.release = 21
        options.encoding = "UTF-8"
    }

    javadoc {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenLocal()
        maven { url = 'https://repo.jobrunr.io/maven-central-proxy' }
        mavenCentral()
    }

    dependencies {
        implementation platform(project(':platform'))
        compileOnly 'org.apache.groovy:groovy-json:4.0.27'

        errorprone("com.google.errorprone:error_prone_core:2.43.0")

        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'io.github.artsok:rerunner-jupiter'
        testImplementation 'org.awaitility:awaitility'
        testImplementation 'org.assertj:assertj-core'
        testImplementation 'com.tngtech.archunit:archunit-junit5'
        testImplementation 'net.javacrumbs.json-unit:json-unit-assertj'
        testImplementation 'ch.qos.logback:logback-classic'
        testImplementation 'org.mockito:mockito-inline'
        testImplementation 'org.mockito:mockito-junit-jupiter'

        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    tasks.clean.doFirst {
        def projectName = project.name
        delete "/tmp/reports/$projectName"
        println "Deleted /tmp/reports/$projectName"

    }

    test {
        finalizedBy jacocoTestReport
        reports.junitXml.outputLocation = file("/tmp/reports/$project.name")
        reports.html.outputLocation = file("/tmp/reports/$project.name")

        useJUnitPlatform()
        testLogging {
            minGranularity = 3
            events "passed", "skipped", "failed"
        }
    }

    sonar {
        properties {
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.projectKey", "jobrunr_jobrunr"
            property "sonar.organization", "jobrunr"
            property "sonar.branch.name", System.getenv("CI_COMMIT_BRANCH") ?: "master"
            property "sonar.coverage.jacoco.xmlReportPaths", "/tmp/reports/$project.name/jacocoTestCoverage.xml"
        }
    }

    jacoco {
        toolVersion = "0.8.14"
    }

    jacocoTestReport {
        reports {
            xml.required = true
            xml.outputLocation = file("/tmp/reports/$project.name/jacocoTestCoverage.xml")
            csv.required = false
            html.required = false
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}