import java.text.SimpleDateFormat

plugins {
    id 'com.github.ben-manes.versions' version '0.53.0'
    id 'java-library'
    id 'java-test-fixtures'
    id 'maven-publish'
    id 'signing'
}

sourceSets {
    main {
        resources {
            exclude '**/node_modules/'
            exclude '**/dependency-check-bin/'
            exclude '**/public/'
            exclude '**/src/'
            exclude '**/jsconfig.json'
            exclude '**/package.json'
            exclude '**/package-lock.json'
        }
    }
}

tasks.register('myJavadocs', Javadoc) {
    source = sourceSets.main.allJava
    classpath = project.sourceSets.main.compileClasspath
    options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
}

tasks.register('runFrontEndDevelopment', JavaExec) {
    group = "Execution"
    description = "Run the FrontEnd Development JavaExecTask"
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'org.jobrunr.dashboard.FrontEndDevelopment'
}


dependencies {
    api platform(project(':platform'))

    api 'org.slf4j:slf4j-api'
    api 'org.ow2.asm:asm'

    compileOnly 'com.fasterxml.jackson.core:jackson-databind'
    compileOnly 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compileOnly 'com.google.code.gson:gson'
    compileOnly 'org.eclipse:yasson'
    compileOnly 'io.micrometer:micrometer-core'

    compileOnly 'com.oracle.database.jdbc:ojdbc8'
    compileOnly 'org.mongodb:mongodb-driver-sync'

    testImplementation 'org.ow2.asm:asm-util'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    testImplementation 'com.google.code.gson:gson'
    testImplementation 'org.eclipse:yasson'
    testImplementation 'io.micrometer:micrometer-core'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:testcontainers-junit-jupiter'
    testImplementation 'org.testcontainers:testcontainers-mariadb'
    testImplementation 'org.testcontainers:testcontainers-mssqlserver'
    testImplementation 'org.testcontainers:testcontainers-mysql'
    testImplementation 'org.testcontainers:testcontainers-oracle-free'
    testImplementation 'org.testcontainers:testcontainers-postgresql'
    testImplementation 'org.testcontainers:testcontainers-db2'
    testImplementation 'org.xerial:sqlite-jdbc'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.postgresql:postgresql'
    testImplementation 'com.google.cloud.sql:postgres-socket-factory'
    testImplementation 'com.microsoft.sqlserver:mssql-jdbc'
    testImplementation 'com.ibm.db2:jcc'
    testImplementation 'com.oracle.database.jdbc:ojdbc8'
    testImplementation 'org.mariadb.jdbc:mariadb-java-client'
    testImplementation 'com.mysql:mysql-connector-j'
    testImplementation 'com.zaxxer:HikariCP'
    testImplementation 'org.apache.commons:commons-dbcp2'
    testImplementation 'io.agroal:agroal-pool'
    testImplementation 'org.apache.tomcat:tomcat-jdbc'
    testImplementation 'org.mongodb:mongodb-driver-sync'
    testImplementation 'org.wiremock:wiremock'

    testFixturesApi 'org.junit.jupiter:junit-jupiter'
    testFixturesApi 'org.mockito:mockito-inline'
    testFixturesApi 'org.mockito:mockito-junit-jupiter'
    testFixturesApi 'org.assertj:assertj-core'
    testFixturesApi 'io.github.artsok:rerunner-jupiter'
    testFixturesApi 'org.awaitility:awaitility'
    testFixturesApi 'net.javacrumbs.json-unit:json-unit-assertj'
    testFixturesApi 'ch.qos.logback:logback-classic'
    testFixturesApi 'io.micrometer:micrometer-core'
}

java {
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    options.release = 8
}

compileTestFixturesJava {
    options.release = 11
}

normalization {
    runtimeClasspath {
        ignore '**/MANIFEST.MF'
        ignore '**/frontend/**'
    }
}

tasks.register('npmInstall', Exec) {
    workingDir = file('src/main/resources/org/jobrunr/dashboard/frontend')
    commandLine 'npm', 'install'
    inputs.file('src/main/resources/org/jobrunr/dashboard/frontend/package.json')
    outputs.dir('src/main/resources/org/jobrunr/dashboard/frontend/node_modules')
    outputs.cacheIf { true }
}

tasks.register('npmRunBuild', Exec) {
    dependsOn 'npmInstall'
    workingDir = file('src/main/resources/org/jobrunr/dashboard/frontend')
    commandLine 'npm', 'run', 'build'
    inputs.dir('src/main/resources/org/jobrunr/dashboard/frontend/src').withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file('src/main/resources/org/jobrunr/dashboard/frontend/package.json')
    outputs.dir('src/main/resources/org/jobrunr/dashboard/frontend/build')
    outputs.cacheIf { true }
}

tasks.register('npmRunTest', Exec) {
    dependsOn 'npmInstall'
    workingDir = file('src/main/resources/org/jobrunr/dashboard/frontend')
    commandLine 'npm', 'run', 'test'
    inputs.dir('src/main/resources/org/jobrunr/dashboard/frontend/src').withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file('src/main/resources/org/jobrunr/dashboard/frontend/package.json')
    outputs.dir('/tmp/reports/core/frontend')
    outputs.cacheIf { true }
}

jar {
    def asmVersion = configurations.compileClasspath.incoming.resolutionResult.allComponents.find {
        it.moduleVersion?.group == 'org.ow2.asm' && it.moduleVersion.name == 'asm'
    }?.moduleVersion?.version
    exclude('**/dependency-check-bin/', '**/dependency-check-reports/')
    manifest {
        attributes 'Automatic-Module-Name': 'org.jobrunr.core'
        attributes 'Built-By': 'build.jobrunr.io'
        attributes 'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())
        attributes 'Build-Version': project.version
        attributes 'Implementation-Title': 'JobRunr'
        attributes 'Implementation-Version': project.version
        attributes 'Bundle-Version': project.version
        attributes 'Created-By': "Gradle ${gradle.gradleVersion}"
        attributes 'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
        attributes 'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        attributes 'Minimum-ASM-Version': "${asmVersion}"
        attributes 'Git-Branch': getGitBranch()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.jobrunr'
            artifactId = 'jobrunr'
            version = project.version
            from components.java

            pom {
                name = 'JobRunr'
                description = 'An easy way to perform background processing on the JVM. Backed by persistent storage. Open and free for commercial use.'
                url = 'https://github.com/jobrunr/jobrunr'
                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0 or later'
                        url = 'https://github.com/jobrunr/jobrunr/blob/master/License.md#lgpl-v3-license'
                    }
                    license {
                        name = 'Commercial License'
                        url = 'https://github.com/jobrunr/jobrunr/blob/master/License.md#commercial-license'
                    }
                }
                developers {
                    developer {
                        id = 'rdehuyss'
                        name = 'Ronald Dehuysser'
                        email = 'ronald.dehuysser@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/jobrunr/jobrunr.git'
                    developerConnection = 'scm:git@github.com:jobrunr/jobrunr.git'
                    url = 'https://github.com/jobrunr/jobrunr.git'
                }

                versionMapping {
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                withXml {
                    def pomNode = asNode()
                    pomNode.remove(pomNode.dependencyManagement)
                    pomNode.dependencies.'*'.findAll() {
                        it.optional.text() == 'true'
                    }.each() {
                        it.parent().remove(it)
                    }
                }
            }
        }
    }
}

signing {
    String base64Key = System.getenv('SIGNING_KEY')
    if (base64Key) {
        useInMemoryPgpKeys(new String(Base64.decoder.decode(base64Key)), System.getenv('SIGNING_PASSWORD'))
        sign publishing.publications.mavenJava
    }
}

def getGitBranch() {
    return providers.exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
    }.standardOutput.asText.get().trim()
}
